Dies ist sharutils.info, hergestellt von Makeinfo Version 4.2 aus
sharutils.texi.

INFO-DIR-SECTION File transfer and archiving tools
START-INFO-DIR-ENTRY
* Shar utilities: (sharutils).                  GNU shar utilities.
* mail-files: (sharutils)mail-files invocation. Send files to remote site.
* mailshar: (sharutils)mailshar invocation.     Make and send a shell archive.
* shar: (sharutils)shar invocation.             Make a shell archive.
* unshar: (sharutils)unshar invocation.         Explode a shell archive.
* uudecode: (sharutils)uudecode invocation.     Restore file from 7-bits.
* uuencode: (sharutils)uuencode invocation.     Force binary file to 7-bits.
END-INFO-DIR-ENTRY

This manual documents version 4.3.76 of the GNU shar utilities.

   Copyright (C) 1994 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License".
   

File: sharutils.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

GNU `shar' utilities
********************

This manual documents version 4.3.76 of the GNU shar utilities.

   Copyright (C) 1994 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License".
   
   GNU `shar' makes so-called shell archives out of many files,
preparing them for transmission by electronic mail services, while
`unshar' helps unpacking shell archives after reception.  Other tools
help using `shar' with the electronic mail system, and even allow
synchronization of remote directory trees.  This is release 4.3.76.

* Menu:

* Introduction::                Introduction to this toolset
* Basic::                       The basic `shar' utilities
* Wrappers::                    Simple wrappers around `shar'
* Remsync::                     Remote synchronisation of directories
* GNU Free Documentation License::     The license for this documentation.

 --- The Detailed Node Listing ---

The basic `shar' utilities

* shar invocation::             Invoking the `shar' program
* unshar invocation::           Invoking the `unshar' program
* Miscellaneous::               Miscellaneous considerations

Invoking the `shar' program

* Selecting::                   Selecting files
* Splitting::                   Splitting output
* Headers::                     Controlling the shar headers
* Stocking::                    Selecting how files are stocked
* Transmission::                Protecting against transmission
* Kinds::                       Producing different kinds of shar

Simple wrappers around `shar'

* Invoking mailshar::           The `mailshar' command and arguments
* Invoking mail-files::         The `mail-files' command and arguments
* Invoking find-mailer::        The `find-mailer' command and arguments

Remote synchronisation of directories

* Quick start::                 Quick start at using `remsync'
* Invoking remsync::            The `remsync' command and arguments
* Conveniences::                Automatic mechanisms in the `remsync' program
* Commands::                    Commands for `remsync'
* Internals::                   How `remsync' works
* Formats::                     Related file formats
* Xremsync::                    Format of the `.remsync' file
* Package::                     Format of transiting packages
* Alternatives::                Other means to synchronization
* Previous::                    Documentation for obsolete scripts

The `remsync' command and arguments

* Conveniences::                Automatic mechanisms in the `remsync' program
* Commands::                    Commands for `remsync'

Related file formats

* Xremsync::                    Format of the `.remsync' file
* Package::                     Format of transiting packages

Documentation for obsolete scripts

* mailsync::                    mailsync
* resync::                      resync

GNU Free Documentation License

* How to use this License for your documents::


File: sharutils.info,  Node: Introduction,  Next: Basic,  Prev: Top,  Up: Top

Introduction to this toolset
****************************

   GNU `uuencode' and `uudecode' have an history which roots are lost
in ages, and we will not even try to trace it.  The current versions
were brought into GNU by Ian Lance Taylor, and later modernized by
Ulrich Drepper.  GNU `shar' surely has a long history, too.  All along
this long road, numerous users contributed various improvements.  The
file `THANKS' in the distribution, as far as we know, contain the names
of all contributors we could identify, and for which email addresses
are seemingly valid.

   Please help us getting the history straight, for the following
information is somewhat approximative.  James Gosling wrote the public
domain `shar 1.x'.  William Davidsen rewrote it as `shar 2.x'.  Warren
Tucker implemented modifications and called it `shar 3.x'.  Richard
Gumpertz maintained it until 1990.  Franc,ois Pinard, from the public
domain `shar 3.49', made `GNU shar 4.x', in 1994.  Some modules and
other code sections were freely borrowed from other GNU distributions,
bringing this `shar' under the terms of the GNU General Public License.

   The few wrapper scripts and the `remsync' program have been
contributed more recently by Franc,ois Pinard, just as an attempt for
making this GNU `sharutils' toolset more useful.

   Your feedback helps us to make a better and more portable product.
Mail suggestions and bug reports (including documentation errors) for
these programs to `bug-gnu-utils@prep.ai.mit.edu'.


File: sharutils.info,  Node: Basic,  Next: Wrappers,  Prev: Introduction,  Up: Top

The basic `shar' utilities
**************************

   GNU `shar' makes so-called shell archives out of many files,
preparing them for transmission by electronic mail services.  A "shell
archive" is a collection of files that can be unpacked by `/bin/sh'.  A
wide range of features provide extensive flexibility in manufacturing
shars and in specifying shar _smartness_.  For example, `shar' may
compress files, uuencode binary files, split long files and construct
multi-part mailings, ensure correct unsharing order, and provide
simplistic checksums.  *Note shar invocation::.

   GNU `unshar' scans a set of mail messages looking for the start of
shell archives.  It will automatically strip off the mail headers and
other introductory text.  The archive bodies are then unpacked by a
copy of the shell.  `unshar' may also process files containing
concatenated shell archives.  *Note unshar invocation::.

* Menu:

* shar invocation::             Invoking the `shar' program
* unshar invocation::           Invoking the `unshar' program
* Miscellaneous::               Miscellaneous considerations


File: sharutils.info,  Node: shar invocation,  Next: unshar invocation,  Prev: Basic,  Up: Basic

Invoking the `shar' program
===========================

   The format of the `shar' command is one of:

     shar [ OPTION ] ... FILE ...
     shar -S [ OPTION ] ...

   In the first form, the file list is given as command arguments.  In
the second form, the file list is read from standard input.  The
resulting archive is sent to standard output unless the `-o' option is
given.

   Options can be given in any order.  Some options depend on each
other: the `-o' option is required if the `-l' or `-L' option is used.
The `-n' option is required if the `-a' option is used.  Also see `-V'
below.

   Some options are special purpose:

`--help'
     Print a help summary on standard output, then immediately exits.

`--version'
     Print the version number of the program on standard output, then
     immediately exits.

`-q'
`--quiet'
     Verbose _off_ at `shar' time.  Messages are usually issued on
     standard error to let the user follow the progress, while making
     the archives.  This option inhibits these messages.

* Menu:

* Selecting::                   Selecting files
* Splitting::                   Splitting output
* Headers::                     Controlling the shar headers
* Stocking::                    Selecting how files are stocked
* Transmission::                Protecting against transmission
* Kinds::                       Producing different kinds of shar


File: sharutils.info,  Node: Selecting,  Next: Splitting,  Prev: shar invocation,  Up: shar invocation

Selecting files
---------------

`-p'
`--intermix-type'
     Allow positional parameter options.  The options `-M', `-B', `-T',
     `-z' and `-Z' may be embedded, and files to the right of the
     option will be processed in the specified mode.  Without the `-p'
     option, embedded options would be interpreted as file names.
     *Note Stocking::.

`-S'
`--stdin-file-list'
     Read list of files to be packed from the standard input rather
     than from the command line.  Input must be one file name per line.
     This switch is especially useful when the command line will not
     hold the list of files to be packed.  For example:

          find . -type f -print | shar -S -o /tmp/big.shar

     If `-p' is specified on the command line, then the options `-M',
     `-B', `-T', `-z' and `-Z' may be included in the standard input
     (on a line separate from file names).  The maximum number of lines
     of standard input, file names and options, may not exceed 1024.


File: sharutils.info,  Node: Splitting,  Next: Headers,  Prev: Selecting,  Up: shar invocation

Splitting output
----------------

`-o PREFIX'
`--output-prefix=PREFIX'
     Save the archive to files `PREFIX.01' through `PREFIX.NNN' instead
     of standard output.  This option _must_ be used when the `-l' or
     the `-L' switches are used.

     When PREFIX contains any `%' character, PREFIX is then interpreted
     as a `sprintf' format, which should be able to display a single
     decimal number.  When PREFIX does not contain such a `%'
     character, the string `.%02d' is internally appended.

`-l SIZE'
`--whole-size-limit=SIZE'
     Limit the output file size to SIZE times 1024 bytes but don't
     split input files.  This allows the recipient of the shell archives
     to unpack them in any order.

`-L SIZE'
`--split-size-limit=SIZE'
     Limit output file size to SIZE times 1024 bytes and split files if
     necessary.  The archives created with this option must be unpacked
     in the correct order.  If the recipient of the shell archives
     wants to put all of them in a single folder, she shall save them
     in the correct order for `unshar', used with option `-e', to
     unpack them all at once.  *Note unshar invocation::.

     For people used to saving all the shell archives into a single mail
     folder, care must be taken to save them in the appropriate order.
     For those having the appropriate tools (like Masanobu Umeda's
     `rmailsort' package for GNU Emacs), shell archives can be saved in
     any order, then sorted by increasing date (or send time) before
     massive unpacking.


File: sharutils.info,  Node: Headers,  Next: Stocking,  Prev: Splitting,  Up: shar invocation

Controlling the shar headers
----------------------------

`-n NAME'
`--archive-name=NAME'
     Name of archive to be included in the header of the shar files.
     Also see the `-a' switch further down.

`-s ADDRESS'
`--submitter=ADDRESS'
     The `-s' option allows for overriding the email address for the
     submitter, for when the default is not appropriate.  The
     automatically determined address looks like `USERNAME@HOSTNAME'.

`-a'
`--net-headers'
     Allows automatic generation of headers:

          Submitted-by: ADDRESS
          Archive-name: NAME/partNN

     The NAME must be given with the `-n' switch.  If name includes a
     `/', then `/part' isn't used. Thus `-n xyzzy' produces:
          xyzzy/part01
          xyzzy/part02

     while `-n xyzzy/patch' produces:
          xyzzy/patch01
          xyzzy/patch02

     and `-n xyzzy/patch01.' produces:
          xyzzy/patch01.01
          xyzzy/patch01.02

`-c'
`--cut-mark'
     Start the shar with a cut line.  A line saying `Cut here' is
     placed at the start of each output file.


File: sharutils.info,  Node: Stocking,  Next: Transmission,  Prev: Headers,  Up: shar invocation

Selecting how files are stocked
-------------------------------

`-T'
`--text-files'
     Treat all files as text, regardless of their contents.

`-B'
`--uuencode'
     Treat all files as binary, use `uuencode' prior to packing. This
     increases the size of the archive. The recipient must have
     `uudecode' in order to unpack.

          Use of `uuencode' is not appreciated by many on the net, because
          people like to readily see, by mere inspection of a shell archive,
          what it is about.

`-M'
`--mixed-uuencode'
     Mixed mode.  Automatically determine if the files are text or
     binary and archive correctly.  Files found to be binary are
     uuencoded prior to packing.  This option is selected by default.

     For a file is considered to be a text file, instead of a binary
     file, all the following should be true simultaneously:
       1. The file does not contain any ASCII control character besides
          <BS> (backspace), <HT> (horizontal tab), <LF> (new line) or
          <FF> (form feed).

       2. The file does not contains a <DEL> (delete).

       3. The file contains no character with its eighth-bit set.

       4. The file, unless totally empty, terminates with a <LF>
          (newline).

       5. No line in the file contains more than 200 characters.  For
          counting purpose, lines are separated by a <LF> (newline).

`-z'
`--gzip'
     Use `gzip' and `uuencode' on all files prior to packing.  The
     recipient must have `uudecode' and `gzip' (used with `-d') in
     order to unpack.

     Usage of `-z' in net shars will cause you to be flamed off the
     earth.

`-g LEVEL'
`--level-for-gzip=LEVEL'
     When doing compression, use `-LEVEL' as a parameter to `gzip'.
     The `-g' option turns on the `-z' option by default.  The default
     value is 9, that is, maximum compression.

`-j'
`--bzip2'
     Use `bzip2' and `uuencode' on all files prior to packing.  The
     recipient must have `uudecode' and `bzip2' (used with `-d') in
     order to unpack.

     Usage of `-j' in net shars will cause you to be flamed off to hell.

`-Z'
`--compress'
     Use `compress' and `uuencode' on all files prior to packing.  The
     recipient must have `uudecode' and `compress' (used with `-d') in
     order to unpack.  Option `-C' is a synonymous for `-Z', but is
     deprecated.

     Usage of `-Z' in net shars will cause you to be flamed off the
     earth.

`-b BITS'
`--bits-per-code=BITS'
     When doing compression, use `-bX' as a parameter to `compress'.
     The `-b' option turns on the `-Z' option by default.  The default
     value is 12, foreseeing the memory limitations of some `compress'
     programs on smallish systems, at `unshar' time.


File: sharutils.info,  Node: Transmission,  Next: Kinds,  Prev: Stocking,  Up: shar invocation

Protecting against transmission errors
--------------------------------------

   Transmission of shell archives is not always free of errors.  So one
should make consistency checks on the receiving site.  A very simple
(and unreliable) method is running the UNIX `wc' tool on the output
file.  This can report the number of characters in the file.

   As one can guess this does not catch all errors.  Especially
changing of a character value does not change the computed check sum.
To achieve this goal better method were invented and standardized.  One
very strong is MD5 (MD = message digests).  This is standardized in RFC
1321.  The produced shell scripts do not force the `md5sum' program to
be installed on the system.  This is necessary because it is not yet
part of every UNIX.  The program is however not necessary for producing
the shell archive.

`-w'
`--no-character-count'
     Do _not_ check with `wc -c' after unpack.  The default is to check.

`-D'
`--no-md5-digest'
     Do _not_ check with `md5sum' after unpack.  The default is to
     check.

`-F'
`--force-prefix'
     Prepend the prefix character to every line even if not required.
     This option may slightly increase the size of the archive,
     especially if `-B' or `-Z' is used.  Normally, the prefix character
     is `X'.  If the parameter to the `-d' option starts with `X', then
     the prefix character becomes `Y'.

`-d STRING'
`--here-delimiter=STRING'
     Use STRING to delimit the files in the shar instead of `SHAR_EOF'.
     This is for those who want to personalize their shar files.


File: sharutils.info,  Node: Kinds,  Prev: Transmission,  Up: shar invocation

Producing different kinds of shars
----------------------------------

`-V'
`--vanilla-operation'
     This option produces "vanilla" shars which rely only upon the
     existence of `echo', `test' and `sed' in the unpacking environment.

     The `-V' disables options offensive to the "network cop" (or
     "brown shirt").  It also changes the default from mixed mode `-M'
     to text mode `-T'.  Warnings are produced if option `-B', `-z',
     `-j', `-Z', `-p' or `-M' is specified (any of which does or might
     require `uudecode', `gzip', `bzip2' or `compress' in the unpacking
     environment).

`-P'
`--no-piping'
     In the shar file, use a temporary file to hold the file to
     `uudecode', instead of using pipes.  This option is mandatory when
     you know the unpacking `uudecode' is unwilling to merely read its
     standard input.  Richard Marks wrote what is certainly the most
     (in)famous of these, for MSDOS :-).

     (Here is a side note from the maintainer.  Why isnt't this option
     the default?  In the past history of `shar', it was decided that
     piping was better, surely because it is less demanding on disk
     space, and people seem to be happy with this.  Besides, I think
     that the `uudecode' from Richard Marks, on MSDOS, is wrong in
     refusing to handle `stdin'.  So far that I remember, he has the
     strong opinion that a program without any parameters should give
     its `--help' output.  Besides that, should I say, his `uuencode'
     and `uudecode' programs are full-featured, one of the most
     complete set I ever saw.  But Richard will not release his
     sources, he wants to stay in control.)

`-x'
`--no-check-existing'
     Overwrite existing files without checking.  If neither `-x' nor
     `-X' is specified, when unpacking itself, the shell archive will
     check for and not overwrite existing files (unless `-c' is passed
     as a parameter to the script when unpacking).

`-X'
`--query-user'
     Interactively overwrite existing files.

     Use of `-X' produces shars which _will_ cause problems with some
     `unshar'-style procedures, particularily when used together with
     vanilla mode (`-V').  Use this feature mainly for archives to be
     passed among agreeable parties.  Certainly, `-X' is _not_ for
     shell archives which are to be submitted to Usenet or other public
     networks.

     The problem is that `unshar' programs or procedures often feed
     `/bin/sh' from its standard input, thus putting `/bin/sh' and the
     shell archive script in competition for input lines.  As an
     attempt to alleviate this problem, `shar' will try to detect if
     `/dev/tty' exists at the receiving site and will use it to read
     user replies.  But this does not work in all cases, it may happen
     that the receiving user will have to avoid using `unshar' programs
     or procedures, and call `/bin/sh' directly.  In vanilla mode,
     using `/dev/tty' is not even attempted.

`-m'
`--no-timestamp'
     Avoid generating `touch' commands to restore the file modification
     dates when unpacking files from the archive.

     When the timestamp relationship is not preserved, some files like
     `configure' or `*.info' may be uselessly remade after unpacking.
     This is why, when this option is not used, a special effort is
     made to restore timestamps,

`-Q'
`--quiet-unshar'
     Verbose _off_ at `unshar' time.  Disables the inclusion of
     comments to be output when the archive is unpacked.

`-f'
`--basename'
     Use only the last file name component of each input file name,
     ignoring any prefix directories.  This is sometimes useful when
     building a shar from several directories, or another directory.
     If a directory name is passed to `shar', the substructure of that
     directory will be restored whether `-f' is specified or not.


File: sharutils.info,  Node: unshar invocation,  Next: Miscellaneous,  Prev: shar invocation,  Up: Basic

Invoking the `unshar' program
=============================

   The format of the `unshar' command is:

     unshar [ OPTION ] ... [ FILE ... ]

   Each FILE is processed in turn, as a shell archive or a collection
of shell archives.  If no files are given, then standard input is
processed instead.

   Options:

`--version'
     Print the version number of the program on standard output, then
     immediately exits.

`--help'
     Print an help summary on standard output, then immediately exits.

`-d DIRECTORY'
`--directory=DIRECTORY'
     Change directory to DIRECTORY before unpacking any files.

`-c'
`--overwrite'

`-f'
`--force'
     Passed as an option to the shar file.  Many shell archive scripts
     (including those produced by `shar' 3.40 and newer) accepts a `-c'
     argument to indicate that existing files should be overwritten.

     The option `-f' is provided for a more unique interface.  Many
     programs (such as `cp' and `mv') use this option to trigger the
     very same action.

`-e'
`--exit-0'
     This option exists mainly for people who collect many shell
     archives into a single mail folder.  With this option, `unshar'
     isolates each different shell archive from the others which have
     been put in the same file, unpacking each in turn, from the
     beginning of the file towards its end.  Its proper operation
     relies on the fact that many shar files are terminated by a
     `exit 0' at the beginning of a line.

     Option `-e' is internally equivalent to `-E "exit 0"'.

`-E STRING'
`--split-at=STRING'
     This option works like `-e', but it allows you to specify the
     string that separates archives if `exit 0' isn't appropriate.

     For example, noticing that most `.signatures' have a `--' on a
     line right before them, one can sometimes use `--split-at=--' for
     splitting shell archives which lack the `exit 0' line at end.  The
     signature will then be skipped altogether with the headers of the
     following message.


File: sharutils.info,  Node: Miscellaneous,  Prev: unshar invocation,  Up: Basic

Miscellaneous considerations
============================

   Here is a place-holder for many considerations which do not fit
elsewhere, while not worth a section for themselves.

   Be careful that the output file(s) are not included in the inputs or
`shar' may loop until the disk fills up.  Be particularly careful when
a directory is passed to `shar' that the output files are not in that
directory (or a subdirectory of that directory).

   When a directory is passed to `shar', it may be scanned more than
once, to conserve memory.  Therefore, one should be careful to not
change the directory contents while `shar' is running.

   No attempt is made to restore the protection and modification dates
for directories, even if this is done by default for files.  Thus, if a
directory is given to `shar', the protection and modification dates of
corresponding unpacked directory may not match those of the original.

   Use of the `-M' or `-B' options will slow down the archive process.
Use of the `-z' or `-Z' options may slow the archive process
considerably.

   Let us conclude by a showing a few examples of `shar' usage:

     shar *.c > cprog.shar
     shar -Q *.[ch] > cprog.shar
     shar -B -l28 -oarc.sh. *.arc
     shar -f /lcl/src/u*.c > u.sh

The first shows how to make a shell archive out of all C program
sources.  The second produces a shell archive with all `.c' and `.h'
files, which unpacks silently.  The third gives a shell archive of all
uuencoded `.arc' files, into files `arc.sh.01' through to `arc.sh.NNN'.
The last example gives a shell archive which will use only the file
names at unpack time.


File: sharutils.info,  Node: Wrappers,  Next: Remsync,  Prev: Basic,  Up: Top

Simple wrappers around `shar'
*****************************

* Menu:

* Invoking mailshar::           The `mailshar' command and arguments
* Invoking mail-files::         The `mail-files' command and arguments
* Invoking find-mailer::        The `find-mailer' command and arguments


File: sharutils.info,  Node: Invoking mailshar,  Next: Invoking mail-files,  Prev: Wrappers,  Up: Wrappers

The `mailshar' command and arguments
====================================


File: sharutils.info,  Node: Invoking mail-files,  Next: Invoking find-mailer,  Prev: Invoking mailshar,  Up: Wrappers

The `mail-files' command and arguments
======================================


File: sharutils.info,  Node: Invoking find-mailer,  Prev: Invoking mail-files,  Up: Wrappers

The `find-mailer' command and arguments
=======================================


File: sharutils.info,  Node: Remsync,  Prev: Wrappers,  Up: Top

Remote synchronisation of directories
*************************************

   For using the `remsync' facility, besides `sharutils' of course, you
also need `perl', GNU `tar', GNU `findutils' and `gzip', all installed.
You also need a `sum' program which is BSD-compatible, for example the
one from GNU `textutils'.

   The `remsync' program tries to maintain up-to-date copies of whole
hierarchy of files over many loosely connected sites, provided there is
at least some slow electronic mail between them.  It prepares and sends
out specially packaged files called "synchronization packages", and is
able to processes them after reception.

   There is no _master_ site, each site has an equal opportunity to
modify files, and modified files are propagated.  Among many other
commands, the `broadcast' command prepares and sends a synchronization
package from the current site to all others, while the `process'
command is used to apply synchronization packages locally after
reception from remote sites.  `remsync' will never send a file to
another site without being asked to with the `broadcast' command, and
besides the project synchronization state files (always named
`.remsync'), it will never modify a file locally without being asked to
with the `process' command.

   The unit of transmission is a file, whatever its size may be.
Nothing less than whole files are being transmitted.  People deciding
to cooperate in keeping a synchronized set of files must have trust
each other, as each participant has the power of modifying the contents
of files at other sites.  When `remsync' is used by a single individual
travelling between many sites, as it is often the case, this confidence
problem should be easier to resolve :-).

   The `process' command will modify a file without asking
confirmation, as long as there is no reason to believe that the file
has been modified at more than one place.  When some confusion arises
from the fact many people independently modified a single file, the
receiving user of conflicting files will have the duty of resolving
them into a merged version.  So, the merging has to be done at the site
where the discrepancy is observed, from where it is propagated again to
others participants.  There is no locking mechanism, so people should
use other means, like electronic mail, for telling each other what they
do, and which part of a project they are working on.

* Menu:

* Quick start::                 Quick start at using `remsync'
* Invoking remsync::            The `remsync' command and arguments
* Conveniences::                Automatic mechanisms in the `remsync' program
* Commands::                    Commands for `remsync'
* Internals::                   How `remsync' works
* Formats::                     Related file formats
* Xremsync::                    Format of the `.remsync' file
* Package::                     Format of transiting packages
* Alternatives::                Other means to synchronization
* Previous::                    Documentation for obsolete scripts


File: sharutils.info,  Node: Quick start,  Next: Invoking remsync,  Prev: Remsync,  Up: Remsync

Quick start at using `remsync'
==============================

   If you are in a real hurry, you can follow the recipe given here,
and postpone studying this manual further.  However, we will consider
only a simple case.  In any case, it is good to read the full example,
as it gives a good picture of the overall usage of `remsync'.

   For any sizeable project, it might not be convenient to start with
one site having it all and the other site having nothing, because this
would cause the first synchronization to be huge.  It is more practical
to move over a copy of the project by other means, might it be
diskettes, tapes, or `mailshar'.  So let's presume both sites have a
copy of the project, not necessarily identical, but close.

   For the following example, we presume that under the same domain
`champignac.land', there are two machines named `spirou' and
`fantasio'.  Further, the participating user on
`spirou@spirou.champignac.land' has `spirou' for a login name, and
similarily, the participating user on `fantasio.champignac.land' has
`fantasio' for a login name.  On the `spirou' machine, user `spirou'
keeps the project under his home, in directory `spirou-copy', while on
the `fantasio' machine, user `fantasio' keeps the project under his
home, in directory `fantasio-copy'.  Of course, user names might be the
same, as well as the directories containing the project.  We use
different names here just to make the example clearer.

   Here is a full transcript of the initialization session, normally
executed only once, and slightly edited to make it more suitable for
this manual.  The example is broken down in little parts, allowing
explanations and comments.

     % cd ~/spirou-copy
     % remsync
     remsync (format *.*) - GNU sharutils *.*
     
     >> mode init
     
     init>> remote fantasio@fantasio.champignac.land ~/fantasio-copy
     * Directory `~/spirou-copy is not ready for synchronization
     Should I prepare it for its first time (y/n)? [y]
     Please enter a short project description: Zorglub project
     What is your full email address, here? [spirou@spirou.champignac.land]

These commands prepare the `~/spirou-copy' hierarchy for
synchronization.  You should be located at the top directory of the
hierarchy at the time the command `remsync' is called.

   The `mode init' command instructs `remsync' that no files should be
sent in the synchronization package, only their checksum.  The goal
here is to inform the other site of what we have, and what we don't,
somewhat disregarding the fact the other site still looks like it has
nothing yet.

   The `remote' command is the key in establishing a synchronization
link.  It has two parameters, the first being the email address of the
partner at the other site (as seen from here, if this matters), the
second being the location of the directory where the package should
reside on the remote site (as seen from there).

   Because there is no `.remsync' file in the project's top-level
directory,  `remsync' concludes this is a first synchronization, and
so, ask a few questions, often telling in square brackets what answer
would be implied by a mere <Return> or <Enter>.  If the default reply
seems inappropriate, just give the correct information.

     init>> broadcast
     
       Broadcasting to address `fantasio@fantasio.champignac.land'
       Studying local files for their signature
       Registering file `file1'
       Registering file `file2'
       Registering file `file3'
     * There were new registrations, please check them
     Should I resume the current command (y/n)? [y]
     Mailing shar to fantasio@fantasio.champignac.land
     Message queued
       Command `broadcast' done
     
     init>> quit
     
     %

   The `broadcast' command produces an inventory of the project's files
at this end, and mail it to the other partners.  But before doing so,
because some new files were registered into the synchronization, the
user is given the opportunity of interrupting the command, if it is
felt that some registered file should really not be there.

   The `quit' command exits `remsync', but only once it created the
`.remsync' file on disk.

   _Then_, on `fantasio.champignac.land', user `fantasio' will receive
the synchronization package, easily recognizable by the fact the string
`.remsync.tar.gz' appears in the `Subject' header of the message.
Let's assume `fantasio' saves the whole message as file
`/tmp/synchro-message'.  Then, `fantasio' might use the following
recipe:

     % cd /tmp
     % unshar synchro-message
     uudecoding file .remsync.tar.gz
     % remsync process
       Exploding archive `/tmp/.remsync.tar.gz'
     
       Package being received:
         from address `spirou@spirou.champignac.land'
         for project `Zorglub project'
       Visiting directory `~/fantasio-copy', remote was `~/spirou-copy'
       Initializing file `.remsync' from received information
       Studying local files for their signature
       Command `process' done

   In that `remsync process' call, the `process' command is being given
non-interactively, so `remsync' avoids unneeded interactions and exits
right away once the command is done.  But equivalently, `remsync' might
be called without arguments, the `process' command given interactively,
and a `quit' command later required to get out of `remsync'.

   When receiving a synchronization package, `remsync' should be
executed in the directory where the file `.remsync.tar.gz' has been
unpacked, which might be quite unrelated to the project itself.  Here,
`fantasio' executed `remsync' in `/tmp/', while the project resides in
`~/fantasio-project'.  The synchronization package itself contains
enough information for `remsync' to automatically visit the proper
directory.

   After this operation, `fantasio.champignac.land' has a `.remsync'
file in `~/fantasio-copy', and the remote synchronization
initialization is completed.  Either `spirou' or `fantasio' may then
modify files on their respective machine.  If `spirou' modifies `file2'
in the project, `spirou' may execute:

     % cd ~/spirou-copy
     % remsync broadcast
       Reading configuration for project `Zorglub project'
     
       Broadcasting to address `fantasio@fantasio.champignac.land'
       Studying local files for their signature
       Packaging file `file2'
     shar: Saving file2 (gzipped)
     Mailing shar to fantasio@fantasio.champignac.land
     Message queued
       Command `broadcast' done

   In fact, any time a participant later feel like sending modified
files to all partners, s/he just have to change the directory to the
top of the project hierarchy, then call `remsync broadcast'.  Any time a
synchronization package is later received, at either end, the receiving
user should apply `unshar' to related electronic messages for
reconstructing the synchronization package `.remsync.tar.gz', then call
`remsync process' in the directory containing this package.


File: sharutils.info,  Node: Invoking remsync,  Next: Conveniences,  Prev: Quick start,  Up: Remsync

The `remsync' command and arguments
===================================

   At the shell prompt, calling the command `remsync' without any
parameters initiates an interactive dialog, in which the user types
commands and receives feedback from the program.

   The command `remsync', given at the shell prompt, may have
arguments, in which case these arguments taken together form one
`remsync' interactive command.  However, `--help' and `--version'
options are interpreted especially, with their usual effect in GNU.
Once this command has been executed, no more commands are taken from
the user and `remsync' terminates execution.  This allows for using
`remsync' in some kind of batch mode.  It is unwise to redirect
`remsync' standard input, because user interactions might often be
needed in ways difficult to predict in advance.

   The two most common usages of `remsync' are the commands:

     remsync b
     remsync p

   The first example executes the `broadcast' command, which sends
synchronization packages to all connected remote sites for the current
local directory tree.

   The second example executes the `process' command, which studies and
complies with a synchronisation package saved in the current directory
(not necessarily into the synchronized directory tree), under the usual
file name `remsync.tar.gz'.

* Menu:

* Conveniences::                Automatic mechanisms in the `remsync' program
* Commands::                    Commands for `remsync'


File: sharutils.info,  Node: Conveniences,  Next: Commands,  Prev: Invoking remsync,  Up: Remsync

Automatic mechanisms in the `remsync' program
=============================================

   The following points apply to many of the `remsync' commands.  We
describe them here once and for all.

   * The file `.remsync' describes the various properties for the
     current synchronization.  It is kept right in the top directory of
     a synchronized directory tree.  Some commands may be executed
     without any need for this file.  The program waits as far as
     possible before reading it.

   * If the `.remsync' file is not found when required, and only then,
     the user is interactively asked to fill a questionnaire about it.

   * If the `.remsync' file has been logically modified after having
     been read, or if it just has been created, the program will save
     it back on disk.  But it will do so only before reading another
     `.remsync' file, or just before exit.  A preexisting `.remsync'
     will be renamed to `.remsync.bak' before it is rewritten, when
     this is done, any previous `.remsync.bak' file is discarded.

   * Many commands refer to previously entered information by repeating
     this information.  For example, one can refer to a particular
     `scan' statement by entering the wildcard to be scanned by this
     statement.  An alternative method of specifying a statement
     consists in using the decimal number which appears between square
     brackets in the result of a `list' command.

   * Whenever a site list must be given, it is a space separated list of
     remote sites.  If the list is preceeded by a bang (<!>), the list
     is complemented, that is, the sites that will be operated upon are
     all those _not_ appearing in the list.  As a special case, if the
     site list is completely empty, then all sites are selected.



File: sharutils.info,  Node: Commands,  Next: Internals,  Prev: Conveniences,  Up: Remsync

Commands for `remsync'
======================

   Program commands to `remsync' may be given interactively by the user
sitten at a terminal.  They can come from the arguments of the
`remsync' call at the shell level.  Internally, the `process' command
might obey many sub-commands found in a received synchronization
package.

   Program commands are given one per line.  Lines beginning with a
sharp (<#>) and white lines are ignored, they are meant to increase
clarity or to introduce user comments.  With only a few exceptions,
commands are introduced by a keyword and often contains other keywords.
In all cases, the keywords specific to `remsync' may be abbreviated to
their first letter.  When there are many keywords in succession, the
space separating them may be omitted.  So the following commands are
all equivalent:

     list remote
     l remote
     list r
     l r
     listremote
     lr

while the following are not legal:

     l rem
     lisremote

   Below, for clarity, keywords are written in full and separated by
spaces.  Commands often accept parameters, which are then separated by
spaces.  All available commands are given in the table.  The first few
commands do not pre-require the file `.remsync'.  The last three
commands are almost never used interactively, but rather automatically
triggered while `process''ing received synchronization packages.

`?'
     Display a quick help summary of available commands.

`!' [ SHELL-COMMAND ]
     If SHELL-COMMAND has been given, execute it right now as a shell
     command.  When not given, rather start an interactive shell.
     Exiting from the shell will return to this program.  The started
     shell is taken from the `SHELL' environment variable if set, else
     `sh' is used.

`quit'
     Leave the program normally and return to the shell.

`abort'
     Leave the program with a nonzero exit status and return to the
     shell.  No attempt is made to save a logically modified `.remsync'
     file.

`visit' DIRECTORY
     Select another synchronized directory tree for any subsequent
     operation.  DIRECTORY is the top directory of the synchronized
     directory tree.

`process' [ FILE ]

`list' [ TYPE ]
     List all known statements about some information TYPE.  Allowable
     keywords for TYPE are `local', `remote', `scan', `ignore' and
     `files'.  The keyword `files' asks for all empty statements (see
     later).  If TYPE is omitted, then list all known statements for
     all types, except those given by `files'.

[ `create' ] TYPE VALUE
     Create a new statement introducing a VALUE for a given TYPE.
     Allowable keywords for TYPE are `remote', `scan' and `ignore'.
     The `create' keyword may be omitted.

     For `create' `ignore', when the pattern is preceeded by a bang
     (<!>), the condition is reversed.  That is, only those files which
     do match the pattern will be kept for synchronization.

`delete' TYPE VALUE
     Delete an existing statement supporting some VALUE for a given
     TYPE.  Allowable keywords for TYPE are `remote', `scan' and
     `ignore'.

`email' REMOTE VALUE
     Modify the electronic mail address associated with some REMOTE
     site, giving it a new VALUE.  The special `local' keyword for
     REMOTE may be used to modify the local electronic mail address.

`home' REMOTE VALUE
     Modify the top directory of the synchronized directory tree
     associated with some REMOTE site, giving it a new VALUE.  The
     special `local' keyword for REMOTE may be used to modify the local
     top directory.

`broadcast' SITE_LIST
     Send by electronic mail an update package to all sites from
     SITE_LIST, containing for each site all and only those files which
     are known to be different between the remote site and here.

`version' VERSION
     This command is not meant for interactive use.  It establishes the
     `remsync' version needed to process the incoming commands.

`from' SITE_LIST
     This command is not really meant for interactive use.  The first
     site from the SITE_LIST is the remote site which originated the
     synchronization package.  All the others are all the sites,
     including here, which were meant to be synchronized by the
     `broadcast' command that was issued at the originating remote site.

`sum' FILE CHECKSUM
     This command is not really meant for interactive use.  It declares
     the CHECKSUM value of a particular FILE at the originating remote
     site.  Also, if at least one `sum' command is received, then it is
     guaranteed that the originating remote site sent one `sum' command
     for each and every file to be synchronized, so any found local
     file which was not subject of any `sum' command does not exist
     remotely.

`if' FILE CHECKSUM PACKAGED
     This command is not really meant for interactive use.  It directs
     the `remsync' program to check if a local FILE has a given
     CHECKSUM.  If the checksum agrees, then the local file will be
     replaced by the PACKAGED file, as found in the received
     synchronization invoice.


File: sharutils.info,  Node: Internals,  Next: Formats,  Prev: Commands,  Up: Remsync

How `remsync' works
===================

   How does `remsync' keep track of what is in sync, and what isn't?
*Note Xremsync::, for a the documentation on the `.remsync' file
format.  I understand that a mere description of the format does not
replace an explanation, but in the meantime, you might guess from the
format how the program works.

   All files are summarized by a checksum, computed by the `sum'
program.  There are a few variants of `sum' computing checksums in
incompatible ways, under the control of options.  `remsync' attempts to
retrieve on each site a compatible way to do it, and complains if it
cannot.

   `remsync' does not compare dates or sizes.  Experience shown that the
best version of a file is not necessarily the one with the latest
timestamp.  The best version for a site is the current version on this
site, as decided by its maintainer there, and this is this version that
will be propagated.

   Each site has an idea of the checksum of a file for all other sites.
These checksums are not necessarily identical, for sites do not
necessarily propagate to all others, and the propagation network maybe
incomplete or asymmetrical in various ways.

   Propagation is never done unattended.  The user on a site has to call
`remsync broadcast' to issue synchronization packages for other sites.
If this is never done, the local modifications will never leave the
site.  The user also has to call `remsync process' to apply received
synchronization packages.  Applying a package does not automatically
broadcast it further (maybe this could change?).

   If a site A propagates some files to sites B and D, but not C, site
B is informed that site D also received these files, and site D is
informed that site B also received these files, so they will not
propagate again the same files to one another.  However, both site B
and D are susceptible to propagate further the same files to site C.

   It may happen that a site refuses to update a file, or modifies a
file after having been received, or merges versions, or whatever.  So,
sites may have a wrong opinion of the file contents on other sites.
These differences level down after a few exchanges, and it is very
unlikely that a file would not be propagated when it should have.

   This scheme works only when the various people handling the various
files have confidence in one each other.  If site B modifies a file
after having received it from site A, the file will eventually be
propagated back to site A.  If the original file stayed undisturbed on
site A, that is, if `remsync' proves that site B correctly knew the
checksum of the original file, then the file will be replaced on site A
without any user confirmation.  So, the user on site A has to trust the
changes made by the user on site B.

   If the original file on site A had been modified after having been
sent in a synchronization package, than it is the responsibility of the
user on site A to correctly merge the local modifications with the
modifications observed in the file as received from site B.  This
responsibility is real, since the merged file will later be propagated
to the other sites in an authoritative way.


File: sharutils.info,  Node: Formats,  Next: Xremsync,  Prev: Internals,  Up: Remsync

Related file formats
====================

* Menu:

* Xremsync::                    Format of the `.remsync' file
* Package::                     Format of transiting packages

